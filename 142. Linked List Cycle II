/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        
        //base conditions
        if (head == null) return null;
        if (head.next == null) return null;        
        
        ListNode fast = head;
        ListNode slow = head;
        
        while (fast != null && fast.next != null) {
            
            fast = fast.next.next;
            slow = slow.next;
            //if cycle break;
            if (fast == slow) break;
        }
        
        //if no cycle, return null
        if (fast != slow) return null;
        
        //if cycle, set slow to head
        slow = head;
        
        //move both slow and fast until they meet, the point at which they meet
        //will be the starting point of the cycle
        while (slow != fast) {
            slow = slow.next;
            fast = fast.next;
        }
        
        return slow;
    }
}
