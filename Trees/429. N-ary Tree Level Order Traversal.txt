/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        
        List<List<Integer>> ans = new ArrayList<>();
        
        if (root == null) {
            return ans;
        }
        
        LinkedList<Node> que = new LinkedList<>();
        
        que.addLast(root);
        List<Integer> sans = new ArrayList<>();
        sans.add(root.val);
        
        ans.add(sans);
        
        while (que.size() > 0) {
            
            int size = que.size();
            sans = new ArrayList<>();
            
            while (size--> 0) {
                
                 Node top = que.removeFirst();
                
                 for (Node child: top.children) {
                    sans.add(child.val);
                    que.addLast(child);
                 }
            }
        
            if (!sans.isEmpty()) {
                ans.add(sans);
            }
            
        }
        
        return ans;
        
    }
}