/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    int idx;
    
    //upper and lower bound
    public TreeNode construct(int[] preorder, int lb, int ub) {
        //base condition if value is not in range, append null
        if (idx>=preorder.length || preorder[idx]<lb || preorder[idx]>ub) {
            return null;
        }   
        
        TreeNode root = new TreeNode(preorder[idx]);
        idx++;
        
        //calling for left tree with new lb and up
        root.left = construct(preorder, lb, root.val);
        //calling for right tree with new lb and up
        root.right = construct(preorder, root.val, ub);
        
        return root;
    }
   
    
    public TreeNode bstFromPreorder(int[] preorder) {
        idx = 0;
        return construct(preorder, Integer.MIN_VALUE, Integer.MAX_VALUE);       
    }
}