/*
	 psi - preorder start index
	 pei - preorder end index
	 
	 isi - inorder start index
	 iei - inorder end index
	 
	 */
	public static TreeNode build(int[] pre, int psi, int pei, int[] ino, int isi, int iei) {
		
		//if reached a null node
		if (psi > pei) {
			return null;
		}
		//if single root node only
		if (psi == pei) {
			return new TreeNode(pre[psi]);
		}
		
		//1st element of preorder will be always root for each tree and subtree
		//preorder approach -  root  left  right
		TreeNode root = new TreeNode(pre[psi]);
		
		int j = isi;
		int count = 0;
		
		//finding value in inorder to get left and right tree from inorder
		//inorder approach - left  root  right
		while (ino[j] != root.val) {
			j++;
			count++;
		}
		
		//calling left part of tree using inorder count, as left of inorder 
		//root will be left subtree
		root.left = build(pre, psi+1, psi+count, ino, isi, isi+count-1);
		//calling right part of tree using inorder count, as right of inorder 
		//root will be right subtree
		root.right = build(pre, psi+count+1, pei, ino, isi+count+1, iei);		
		
		return root;
	}	
	
	public static TreeNode buildTree(int[] preorder, int[] inorder) {
		
		return build(preorder, 0, preorder.length-1, inorder, 0, inorder.length-1);
	}