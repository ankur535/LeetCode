/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        
        //If no node or 1 node, return
        if (head == null || head.next == null) {
            return head;
        }

        ListNode t1 = head;
        ListNode t2 = head.next;

        //until t2 reaches end
        while (t2 != null) {

            //if t1 and t2 have same value, move t2 ahead
            if (t2.val == t1.val) {
                t2 = t2.next;
            } else {
                //Now point t1.next to t2 and move t1 and t2
                t1.next = t2;
                t1 = t2;
                if (t2 != null) {
                    t2 = t2.next;
                }   
            }
        }

        //Do this to avoid missing case if last has duplicates
        //As above code will move t2 to null and break wihout setting t1.next to null;
        t1.next = null;

        return head;
    }
}