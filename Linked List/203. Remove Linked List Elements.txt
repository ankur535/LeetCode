/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeElements(ListNode head, int val) {

        //Elinimating case when we have val from start
        while (head != null && head.val == val) {
            ListNode temp = head;
            head = head.next;
            temp.next = null;
        }

        ListNode curr = head;
        ListNode prev = null;

        //now iterating with current pointer and moving ahead eliminating the
        //nodes with val as value
        while (curr != null) {
            if (curr.val == val) {
                prev.next = curr.next;
                curr.next = null;
                curr = prev.next;
            } else {
                prev = curr;
                curr = curr.next;
            }
        }

        //Head will still point to head of the linked list
        return head;

        /*
            //Another approach
            // Dummy node to simplify handling the head
            
            ListNode dummy=new ListNode(0);
            dummy.next=head;
            ListNode temp=dummy;

            while(temp.next!=null){
                if (temp.next.val==val) {
                    temp.next=temp.next.next;
                } else{
                    temp=temp.next;
                }
            }
            return dummy.next;
        
        */
    }
}