/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        
        int size = 0;
        ListNode temp = head;

        while (temp != null) {
            size++;
            temp = temp.next;
        }

        if ( size == 0) return head;

        k = k % size;

        if ( k == 0) return head;

        temp = head;

        for (int i = 0; i < size-k-1; i++) {
            temp = temp.next;
        }

        ListNode next = temp.next;
        temp.next = null;
        temp = next;

        while (temp.next != null) {
            temp = temp.next;
        }

        temp.next = head;
        return next;
    
    }
}


//Take last node while calculating size
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        
        if(head == null || head.next == null){
            return head;
        }

        int size = 1;
        ListNode temp = head;

        while (temp.next != null) {
            size++;
            temp = temp.next;
        }

        k = k % size;

        if (k == 0) return head;

        //temp currently represent last node
        temp.next = head;

        for (int i = 0; i < size-k; i++) {
            temp = temp.next;
        }

        ListNode next = temp.next;
        temp.next = null;
        return next;
    
    }
}