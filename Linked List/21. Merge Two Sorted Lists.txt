/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {

        ListNode head = null;
        ListNode tail = null;

        //While any 1 list not reaching end, compare the values
        while (list1 != null && list2 != null) {
            ListNode tmp = new ListNode();

            //Taking smaller value else taking l2 if equals
            if (list1.val < list2.val) {
                tmp.val = list1.val;
                list1 = list1.next;
            } else {
                tmp.val = list2.val;
                list2 = list2.next;
            } 

            //Setting head and tail
            if (head == null) {
                head = tail = tmp;
            } else {
                tail.next = tmp;
                tail = tmp;
            }
        }

        //After main loop breaks, setting remaining values of list1 if available
        while (list1 != null) {
            ListNode tmp = new ListNode();
            tmp.val = list1.val;
            list1 = list1.next;

            if (head == null) {
                head = tail = tmp;
            } else {
                tail.next = tmp;
                tail = tmp;
            }
        }

        //After main loop breaks, setting remaining values of list2 if available
        while (list2 != null) {
            ListNode tmp = new ListNode();
            tmp.val = list2.val;
            list2 = list2.next;

            if (head == null) {
                head = tail = tmp;
            } else {
                tail.next = tmp;
                tail = tmp;
            }
        }
        
        return head;
    }
}