class Solution {
    public int findKthLargest(int[] nums, int k) {

        // Using Quick select technique and pivot

        int pivot = quickSelect(nums, 0, nums.length - 1, nums.length - k);
        return nums[pivot];
    }

    public int quickSelect(int[] nums, int low, int high, int k) {

        int pivot = findPivot(nums, low, high);
        
        if (pivot < k) {
            return quickSelect(nums, pivot + 1, high, k);
        } else if (pivot > k) {
            return quickSelect(nums, low, pivot - 1, k);
        }

        return pivot;

    }

    public int findPivot(int[] nums, int low, int high) {

        int pv = nums[low];
        int i = low + 1;
        int j = high;

        while (i <= j) {

            while (i < nums.length && nums[i] < pv) {
                i++;
            }

            while (nums[j] > pv) {
                j--;
            }

            if (i <= j) {
                int tmp = nums[i];
                nums[i] = nums[j];
                nums[j] = tmp;
                i++;
                j--;
            }

        }

        nums[low] = nums[j];
        nums[j] = pv;

        return j;

    }

}