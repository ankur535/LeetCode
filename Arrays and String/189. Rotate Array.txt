class Solution {

    /*Solution 1 - Intermediate Array
    public void rotate(int[] nums, int k) {
        
        int n = nums.length;
        k = k % n;
        if (k < 0) {
            k = k + n;        
        }

        int[] res = new int[n];

        for (int i = 0; i < k; i++) {
            res[i] = nums[n - k + i];
        }

        int j = 0;
        for (int i = k; i < n; i++) {
            res[i] = nums[j];
            j++;
        }

        for (int i = 0; i < n; i++) {
            nums[i] = res[i];
        }
    }
    */

    /*Solution 2 - Bubble Rotate
    public void rotate(int[] nums, int k) {
        
        int n = nums.length;
        k = k % n;
        if (k < 0) {
            k = k + n;        
        }

        for (int i = 0; i < k; i++) {
            for (int j = n - 1; j > 0; j--) {
                int temp = nums[j];
                nums[j] = nums[j - 1];
                nums[j - 1] = temp;
            }
        }
    }
    */

    //Solution 3 - Reversal
    public void rotate(int[] nums, int k) {
        int n = nums.length;
        k = k % n;
        if (k < 0) {
            k = k + n;        
        }

        //length of first part
        int a = n - k;
        
        reverse(nums, 0, a-1);
        reverse(nums, a, nums.length-1);
        reverse(nums, 0, nums.length-1);
    }

    public static void reverse(int[] nums, int left, int right){
        while(left < right){
            int temp = nums[left];
            nums[left] = nums[right];
            nums[right] = temp;
            left++;
            right--;
        }
    }
}