class Solution {
    public int orangesRotting(int[][] grid) {
        
        int n = grid.length;
        int m = grid[0].length;
        
        int freshOranges = 0;
        LinkedList<Integer> que = new LinkedList<>();
        
        //count freshOranges and if rotten add to queue
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1) {
                    freshOranges++;
                } else if (grid[i][j] == 2) {
                    //convert 2D Pair (i,j) to 1D index as 0 to (n*m - 1) 
                    que.addLast(i*m+j);
                }
            }
        }
        
        //if freshOranges are 0, return 0;
        if (freshOranges == 0) {
            return 0;
        }
        
        int level = -1;
        
        //2D direction array
        int[][] dirs = {{0,1},{1,0},{0,-1},{-1,0}};
        
        while (que.size() > 0) {
            int size = que.size();
            
            while (size-- > 0) {
                
                int idx = que.removeFirst();
                
                //convert !D index back to 2D Pair(i,j)
                int i = idx/m;
                int j = idx%m;
                
                for (int[] dir: dirs) {
                    
                    //find new indexes
                    int x = i + dir[0];
                    int y = j + dir[1];
                    
                    if (x >= 0 && y >= 0 && x < n && y < m && grid[x][y] == 1) {
                        //if orange is fresh, have value 1, make it 2
                        //so that we don't need visited array
                        grid[x][y] = 2;
                        freshOranges--;
                        //add new Pair(x,y) as 1D index
                        que.add(x*m+y);
                    }
                }
            }
            
            level++;
        }
        
        //if freshOranges reaches 0, means traverse completely
        //so return level as level was here taken as -1 initially
        if (freshOranges == 0) {
            return level;
        }
        
        //if don't return before, means freshOranges left but couldn't reach
        return -1;
        
    }
}