class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        
        int n = grid.length;
        int m = grid[0].length;
        
        int ans = 0;
        
        boolean[][] vis = new boolean[n][m];
        
        //travel over entire 2D array
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                //if not visited and value is 1, call dfs
                if (!vis[i][j] && grid[i][j] == 1) {
                    //dfs will travel to each connected island and connect them as 1
                    //and get their size
                    int size = dfs(i, j, grid, vis);
                    //take maximum size
                    ans = Math.max(ans, size);
                }
            }
        }
        
        return ans;
    }
    
    public int dfs(int i, int j, int[][] grid, boolean[][] vis) {
        
        int n = grid.length;
        int m = grid[0].length;
        
        vis[i][j] = true;
        
        int size = 0;
        
        //direction array for 2D array
        int[][] dirs = {{0,1},{1,0},{0,-1},{-1,0}};
        
        for (int[] dir: dirs) {
            //find new x and y from directions
            int x = i + dir[0];
            int y = j + dir[1];
            
            //if i and j in range
            //if not visited and value is 1, call dfs
            if (x >= 0 && y >= 0 && x < n && y < m && !vis[x][y] && grid[x][y] == 1) {
                //add to size for each vertex
                size += dfs(x, y, grid, vis);
            }
        }
        
        //add current vertex count to size
        return size + 1;
        
    }
}