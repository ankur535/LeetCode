
package dsalevel1.advancedds.graphs;

import java.util.*;

public class KruskalAlgorithm {

	public static class Edge {
		int nbr;
		int wt;
		
		public Edge (int nbr, int wt) {
			this.nbr = nbr;
			this.wt = wt;
		}
	}
	
	//find leader of u
	public static int findLeader(int u) {
		
		if (par[u] == u) return u;
		
		int pu = findLeader(par[u]);
		
		return par[u] = pu;
	}
	
	//Merge both graphs
	public static void merge(int pu, int pv) {
		
		if (size[pu] < size[pv]) {
			par[pu] = pv;
			size[pv] += size[pu];
		} else {
			par[pv] = pu;
			size[pu] += size[pv];
		}	
	}
	
	//add edge for MST
	public static void addEdge(ArrayList<Edge>[] mst, int u, int v, int w) {
		
		mst[u].add(new Edge(v,w));
		mst[v].add(new Edge(u,w));	
	}
	
	static int[] par;
	static int[] size;
	
	//This is exactly union find, we just sort edges based on weight
	@SuppressWarnings("unchecked")
	public static ArrayList<Edge>[] kruskal (int[][] edges, int V) {
		
		ArrayList<Edge>[] mst = new ArrayList[V];
		
		for (int i = 0; i < V; i++) {
			mst[i] = new ArrayList<>();
		}
		
		//sorting edges based on weight
		Arrays.sort(edges, (int[] a, int[] b) -> {
			return a[2] - b[2];
		});
		
		par = new int[V];
		size = new int[V];
		
		for (int i = 0; i < V; i++) {
			par[i] = i;
			size[i] = 1;
		}
		
		int total_weight = 0;
		
		//iterate over each edge in sorted manner
		for (int[] e: edges) {
			
			int u = e[0];
			int v = e[1];
			int w = e[2];
			
			//leader if u and v
			int lu = findLeader(u);
			int lv = findLeader(v);
			
			if (lu != lv) {
				merge(lu, lv);
				total_weight += w;
				addEdge(mst, u, v, w);
			}
		}
		
		System.out.println("Total weight of MST: " + total_weight);
		return mst;
	}
	
	public static void main (String[] args) {
		
	}
}
