class Solution {
    public void solve(char[][] board) {
        
        int n = board.length;
        int m = board[0].length;
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                //go to boundary containing islands and convert them to $
                if (i == 0 || j == 0 || i == (n-1) || j == (m-1)) {
                    // if value is 'O', call DFS
                    if (board[i][j] == 'O') {
                        dfs(board, i, j);
                    }
                }
            }
        }
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (board[i][j] == 'O') {
                    //convert all middle O to X
                    board[i][j] = 'X';
                } else if (board[i][j] == '$') {
                    //convert boundary island $ back to O
                    board[i][j] = 'O';
                }
            }
        }
    }
             
    public void dfs(char[][] board, int i, int j) {
        
        int n = board.length;
        int m = board[0].length;
        
        //convert 'O' to X for boundary islands
        board[i][j] = '$';
        
        int[][] dirs = {{0,1},{1,0},{0,-1},{-1,0}};
        
        //go to each verted of island in 4 direction
        for (int[] dir: dirs) {
            int x = i + dir[0];
            int y = j + dir[1];
            
            if (x >= 0 && y >= 0 && x < n && y < m && board[x][y] == 'O') {
                dfs(board, x, y);
            }
        }
    }
             
}