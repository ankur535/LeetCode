class Solution {
    
    public int minCostConnectPoints(int[][] points) {
        
        //Code is same as Kruskal but needs to create edges array
//         int len = 0;
        
//         for (int i = 1; i < points.length; i++) {
//             len += i;
//         }
        
        int n = points.length;
        
        int[][] edges = new int[(n * (n-1))/2][3];
        
        int k = 0;
        
        //converting points to edges using there index in points array as vertex number
        for (int i = 0; i < points.length; i++) {
            for (int j = i + 1; j < points.length; j++) {
                edges[k][0] = i;
                edges[k][1] = j;
                edges[k][2] = cost(points[i], points[j]);
                k++;
            }
        }
        
        return kruskal(edges, points.length);
        
    }
    
    //find Manhatten distance
    public int cost(int[] a, int[] b) {
        return Math.abs(a[0]-b[0]) + Math.abs(a[1] - b[1]);
    }
    
    int[] par;
    int[] size;
    
    public int leader(int u) {
        
        if (par[u] == u) return u;
        
        int pu = leader(par[u]);
        
        return par[u] = pu;
    }
    
    public void merge(int pu, int pv) {
        if (size[pu] < size[pv]) {
            par[pu] = pv;
            size[pv] += size[pu];
        } else {
            par[pv] = pu;
            size[pu] += size[pv];
        }
    }
    
    public int kruskal(int[][] edges, int V) {
        
        Arrays.sort(edges, (int[] a, int[] b) -> {
            return a[2] - b[2];
        });
        
        int total_weight = 0;
        
        par = new int[V];
        size = new int[V];
        
        for (int i = 0; i < V; i++) {
            par[i] = i;
            size[i] = 1;
        }
        
        for (int[] e: edges) {
            
            int u = e[0];
            int v = e[1];
            int w = e[2];
            
            int pu = leader(u);
            int pv = leader(v);
            
            if (pu != pv) {
                merge(pu, pv);
                total_weight += w;
            }
        }
        
        return total_weight;
        
    }
}