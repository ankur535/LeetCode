class Trie {

    public static class TrieNode {
			boolean isEnd;
			TrieNode[] children;

			public TrieNode() {
				isEnd = false;
				// 26 size for 26 (a-z) characters
				children = new TrieNode[26];
			}
		}

		TrieNode root;

		/** Initialize your data structure here. */
		public Trie() {
			// fixed root which just holds first char of string
			root = new TrieNode();
		}

		/** Inserts a word into the trie. */
		public void insert(String word) {
			//initial root node
			TrieNode temp = root;

			for (int i = 0; i < word.length(); i++) {

				char ch = word.charAt(i);
				//if that char index for parent node children array is null, add empty node
				if (temp.children[ch - 'a'] == null) {
					temp.children[ch - 'a'] = new TrieNode();
				}

				temp = temp.children[ch - 'a'];
			}

			temp.isEnd = true;
		}

		/** Returns if the word is in the trie. */
		public boolean search(String word) {
			//initial root node
			TrieNode temp = root;

			for (int i = 0; i < word.length(); i++) {

				char ch = word.charAt(i);
				//if that char index for parent node children array is null, means
				//string couldn't find and break in between
				if (temp.children[ch - 'a'] == null) {
					return false;
				}

				temp = temp.children[ch - 'a'];
			}

			//once end of string reached, check for isEnd of last character
			return temp.isEnd;
		}

		/**
		 * Returns if there is any word in the trie that starts with the given prefix.
		 */
		public boolean startsWith(String prefix) {
			//initial root node
			TrieNode temp = root;
			
			for (int i=0; i<prefix.length(); i++) {
				
				char ch = prefix.charAt(i);
				//if that char index for parent node children array is null, means
				//starts with couldn't find and break in between
				if (temp.children[ch-'a'] == null) {
					return false;
				}
				
				temp = temp.children[ch-'a'];
			}

			//once end of string reached, means return true
			return true;
		}
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */