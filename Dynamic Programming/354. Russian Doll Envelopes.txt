class Solution {
    public int maxEnvelopes(int[][] envelopes) {
        
       //int max = LIS(envelopes);
        
        int max = LIS_BS(envelopes);
        
        return max;
    }
    
    public int LIS_BS(int[][] envelopes) {
        
        int n = envelopes.length;
        
        //Sorting on width else on decreasing height
        Arrays.sort(envelopes, (int[] a, int[] b) -> {
            if (a[0] == b[0]) return b[1] - a[1];
            return a[0] - b[0];
        });
        
        ArrayList<Integer> dp = new ArrayList<>();
        
        for (int i = 0; i < n; i++) {
            
            int nwidth = envelopes[i][0];
            int nheight = envelopes[i][1];
            
            //only storing height will also help
            int pos = binary_search(dp, nheight);
            
            if (pos == dp.size()) {
                dp.add(nheight);
            } else {
                dp.set(pos, nheight);
            }
            
        }
        
        return dp.size();
    }
    
    //designed such that si will always have the position to update the element
    public int binary_search(ArrayList<Integer> dp, int ele) {
        
        int si = 0;
        int ei = dp.size() - 1;
        
        while (si <= ei) {
            
            int mid = (si + ei)/ 2;
            
            if (dp.get(mid) < ele) {
                si = mid + 1;
            } else {
                ei = mid - 1;
            }
        }
        
        return si;
    }
    
    
    
    //from Leetcode 300: Longest Increasing Subsequence
    //it gives TLE as it is done in O(n2)
    //so will do it with LIS in O(nlogn)
    public int LIS(int[][] envelopes) {
        int n = envelopes.length;
        
        //Sorting on width
        Arrays.sort(envelopes, (int[] a, int[] b) -> {
            return a[0] - b[0];
        });
        
        int[] dp = new int[n];
        
        int ans = 0;
        
        for (int i = 0; i < n; i++) {
            
            dp[i] = 1;
            int nwidth = envelopes[i][0];
            int nheight = envelopes[i][1];
            
            for (int j = i-1; j >= 0; j--) {
                
                int owidth = envelopes[j][0];
                int oheight = envelopes[j][1];
                
                if (owidth < nwidth && oheight < nheight) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
            
            ans = Math.max(ans, dp[i]);            
        }
        
        return ans;
    }
}