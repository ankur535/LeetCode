class Solution {
    
    //This question is based on Leetcode 1143: Longest commont subsequece
    
    public int minDistance(String word1, String word2) {
        int n = word1.length();
        int m = word2.length();
        
        //for (0,0) towards (n,m)
        //int ans = rec1(word1, word2, 0, 0);
        
        //doing from (n,m) towards (0,0)
        //int ans = rec(word1, word2, n, m);
        
        //int[][] memo = new int[n+1][m+1];
        //int ans = rec_memo(word1, word2, n, m, memo);
        
        int ans = rec_tab(word1, word2);
        
        return word1.length() + word2.length() - (2 * ans);   
    }
    
    //Tabulation, Longest commont subsequece
    public int rec_tab(String text1, String text2) {
        
        int N = text1.length();
        int M = text2.length();
        
        int[][] dp = new int[N+1][M+1];
        
        for (int n = 0; n <= N; n++) {
            for (int m = 0; m <= M; m++) {
                
                if (n == 0 || m == 0) {
                    dp[n][m] = 0;
                    continue;
                }
                
                if (text1.charAt(n-1) == text2.charAt(m-1)) {
                    dp[n][m] = dp[n-1][m-1] + 1;
                } else {
                    dp[n][m] = Math.max(dp[n-1][m], dp[n][m-1]);
                }
            }
        }
        
        return dp[N][M];
    }
    
    //Memoization
    public int rec_memo(String text1, String text2, int n, int m, int[][] memo) {
        
        if (n == 0 || m == 0) {
            return 0;
        }
        
        if (memo[n][m] != 0) return memo[n][m];
        
        if (text1.charAt(n-1) == text2.charAt(m-1)) {
            return memo[n][m] = rec_memo(text1, text2, n-1, m-1, memo) + 1;
        } else {
             return memo[n][m] = Math.max(rec_memo(text1, text2, n-1, m, memo), rec_memo(text1, text2, n, m-1, memo));
        }
        
    }
    
    //Recursion from n,m to 0,0 for 2 pointers
    public int rec(String text1, String text2, int n, int m) {
        
        if (n == 0) return 0;
        if (m == 0) return 0;
        
        if (text1.charAt(n-1) == text2.charAt(m-1)) {
            return rec(text1, text2, n-1, m-1) + 1;
        } else {
            return Math.max(rec(text1, text2, n-1, m), rec(text1, text2, n, m-1));   
        }
    }
    
    //Recursion from n,m to 0,0 for 2 pointers
    public int rec1(String text1, String text2, int n, int m) {
        
        if (n == text1.length()) return 0;
        if (m == text2.length()) return 0;
        
        if (text1.charAt(n) == text2.charAt(m)) {
            return rec1(text1, text2, n+1, m+1) + 1;
        } else {
            return Math.max(rec1(text1, text2, n+1, m), rec1(text1, text2, n, m+1));   
        }
    }
}