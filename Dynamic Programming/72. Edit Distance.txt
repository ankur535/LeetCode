class Solution {
    public int minDistance(String word1, String word2) {
        
        int n = word1.length();
        int m = word2.length();
        
        //int ans = rec(word1, word2, n, m);
        
        //int[][] memo = new int[n+1][m+1];
        //int ans = rec_memo(word1, word2, n, m, memo);
        
        int ans = rec_tab(word1, word2, n, m);
        
        return ans;
    }
    
    //Tabulation
    public int rec_tab(String word1, String word2, int N, int M) {
        
        int[][] dp = new int[N+1][M+1];
        
        for (int n = 0; n <= N; n++) {
            for (int m = 0; m <= M; m++) {
                
                if (n == 0) {
                    dp[n][m] = m;
                    continue;
                }
                
                if (m == 0) {
                    dp[n][m] = n;
                    continue;
                }
                
                if (word1.charAt(n-1) == word2.charAt(m-1)) {
                    dp[n][m] = dp[n-1][m-1];
                } else {
                    
                    int insert = dp[n][m-1];
                    int delete = dp[n-1][m];
                    int replace = dp[n-1][m-1];
                    
                    dp[n][m] = Math.min(insert, Math.min(delete, replace)) + 1;
                    
                }
            }
        }
        
        return dp[N][M];
        
    }
    
    //Memoization
    public int rec_memo(String word1, String word2, int n, int m, int[][] memo) {
        
        if (n == 0 || m == 0) {
            return memo[n][m] = (n==0) ? m : n;
        }
        
        if (memo[n][m] != 0) return memo[n][m];
        
        //if same char, go back and check there
        if (word1.charAt(n-1) == word2.charAt(m-1)) {
            return memo[n][m] = rec_memo(word1, word2, n-1, m-1, memo);
        }
        
        int insert = rec_memo(word1, word2, n, m-1, memo);
        int delete = rec_memo(word1, word2, n-1, m, memo);
        int replace = rec_memo(word1, word2, n-1, m-1, memo);
        
        return memo[n][m] = Math.min(insert, Math.min(delete, replace)) + 1;        
    }
    
    //Recursion
    public int rec(String word1, String word2, int n, int m) {
        
        if (n == 0) return m;
        if (m == 0) return n;
        
        //if same char, go back and check there
        if (word1.charAt(n-1) == word2.charAt(m-1)) {
            return rec(word1, word2, n-1, m-1);
        }
        
        int insert = rec(word1, word2, n, m-1);
        int delete = rec(word1, word2, n-1, m);
        int replace = rec(word1, word2, n-1, m-1);
        
        return Math.min(insert, Math.min(delete, replace)) + 1;        
    }
    
}