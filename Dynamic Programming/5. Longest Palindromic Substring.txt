class Solution {
    public String longestPalindrome(String s) {
        
        int n = s.length();
        
        boolean dp[][] = new boolean[n][n];
        
        int si = -1;
        int ei = -1;
        
        for (int diag = 0 ; diag < n; diag++) {
            
            for (int i = 0, j = diag; j < n; i++, j++) {
                
                if (diag == 0) {    //for single length string
                    dp[i][j] = true;
                } else if (diag == 1) {  //for string with length 2
                    if (s.charAt(i) == s.charAt(j)) {
                        dp[i][j] = true;
                    }
                } else {
                    if (s.charAt(i) == s.charAt(j)) {
                        //check if remaining string is palindrom
                        dp[i][j] = dp[i+1][j-1];
                    }
                }
                
                //to find largest substring
                if (dp[i][j] == true) {
                    si = i;
                    ei = j;
                }
            }
        }
        
        return s.substring(si, ei + 1);
        
        /*
        //travel opposite on the diagonal
        for (int diag = n-1; diag >= 0; diag--) {
            
            for (int i = 0, j = diag; j < n; i++, j++) {
                
                //if any value in the diagonal is true, return it
                if (dp[i][j] == true) {
                    return s.substring(i, j+1);
                }
            }
        }
        
        return "";
        */
        
        
        
    }
}