class Solution {
    public int minimumMountainRemovals(int[] nums) {
        int n = nums.length;
        
        int[] dps = new int[n];
        int[] dpe = new int[n];
        
        //FInding longest increasing subsequence from front
        for (int i = 0; i < n; i++) {
            
            dps[i] = 1;
            
            for (int j = i - 1; j >= 0; j--) {
                if (nums[j] < nums[i]) {
                    dps[i] = Math.max(dps[i], dps[j] + 1);
                }
            }
        }
        
        //FInding longest increasing subsequence from back
        for (int i = n-1; i >= 0; i--) {
            
            dpe[i] = 1;
            
            for (int j = i + 1; j < n; j++) {
                if (nums[j] < nums[i]) {
                    dpe[i] = Math.max(dpe[i], dpe[j] + 1);
                }
            }
        }
        
        int lbs = 0;
        
        //for each index, find lbs and take maximum lbs
        for (int i = 0; i < n; i++) {
            //skipping for completely increasing or completely decreasing mountain
            if (dps[i] == 1 || dpe[i] == 1) continue;
            
            lbs = Math.max(lbs, dps[i] + dpe[i] - 1);
        }
        
        return n - lbs;
    }
}