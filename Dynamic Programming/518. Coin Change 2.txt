class Solution {
    public int change(int amount, int[] coins) {
        //move from n to 0
        //int n = coins.length;
		//int ans = rec2(0, coins, amount);
		
		/*
		 	int[][] memo = new int[n + 1][amount + 1];
			for (int[] m : memo) {
				Arrays.fill(m, -1);
			}

			int ans = rec_memo2(n, coins, amount, memo);
		 */
		
		int ans = rec_tab2(coins, amount);
		
		return ans;
    }
    
    //Tabulation 2 from n to 0
	public static int rec_tab2(int[] arr, int Tar) {
		
		int n = arr.length;
		
		int[][] dp = new int[n+1][Tar+1];
		
		for (int idx = 0; idx <= n; idx++) {
			for (int tar = 0; tar <= Tar; tar++) {
				
				if (tar == 0) {
					dp[idx][tar] = 1;
					continue;
				}
				
				if (idx == 0) {
					dp[idx][tar] = 0;
					continue;
				}
				
				//add how many ways to get answer
				if (tar - arr[idx-1] >= 0) {
					dp[idx][tar] += dp[idx][tar - arr[idx-1]];
				}
				
				dp[idx][tar] += dp[idx-1][tar];
			}
		}
		
		return dp[n][Tar];		
	}
	
	
	public static int rec_memo2(int idx, int[] arr, int tar, int[][] memo) {
		
		if (tar == 0) {
			return memo[idx][tar] = 1;
		}
		
		if (idx == 0) {
			return memo[idx][tar] = 0;
		}
		
		int ans = 0;
		
		//include with same idx
		if (tar - arr[idx-1] >= 0) {
			ans += rec_memo2(idx, arr, tar - arr[idx-1], memo);
		}
		
		//don't include, move to next idx with same target
		ans += rec_memo2(idx-1, arr, tar, memo);
		
		return memo[idx][tar] = ans;
	}
	
	//Recursion 2
	public static int rec2(int idx, int[] arr, int tar) {
		
		if (tar == 0) {
			return 1;
		}
		
		if (idx == 0) {
			return 0;
		}
		
		int ans = 0;
		
		if (tar - arr[idx-1] >= 0) {
			ans += rec2(idx, arr, tar - arr[idx-1]);
		}
		
		ans += rec2(idx-1, arr, tar);
		
		return ans;
	}
}