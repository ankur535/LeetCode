
class MinStack {

    static class Pair {
        int val;
        int vmin;

        public Pair (int val, int vmin) {
            this.val = val;
            this.vmin = vmin;
        }
    }

    LinkedList<Pair> st;

    public MinStack() {
        st = new LinkedList<>();
    }
    
    public void push(int val) {
        
        if (st.size() == 0) {
            st.addLast(new Pair(val, val));
        } else {
            int lastMin = st.getLast().vmin;
            st.addLast(new Pair(val, Math.min(val, lastMin)));
        }
    }
    
    public void pop() {
        st.removeLast();
    }
    
    public int top() {
        return st.getLast().val;
    }
    
    public int getMin() {
        return st.getLast().vmin;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
 


//Array implementation

class MinStack {

    LinkedList<int[]> st;

    public MinStack() {
        st = new LinkedList<>();
    }
    
    public void push(int val) {
        
        if (st.size() == 0) {
            st.addLast(new int[]{val, val});
        } else {
            int lastMin = st.getLast()[1];
            st.addLast(new int[]{val, Math.min(val, lastMin)});
        }
    }
    
    public void pop() {
        st.removeLast();
    }
    
    public int top() {
        return st.getLast()[0];
    }
    
    public int getMin() {
        return st.getLast()[1];
    }
}
 
 
// Single Integer Stack Implementation

class MinStack {

    private Stack<Integer> stack;
    private int min;

    public MinStack() {
        stack = new Stack<>();
        min = Integer.MAX_VALUE;
    }

    public void push(int x) {
        // Update the min if the new element is smaller
        if (x <= min) {
            stack.push(min); // Push the old minimum value onto the stack
            min = x;
        }
        stack.push(x);
    }

    public void pop() {
        // If the popped element is the minimum, pop again to get the new minimum
        if (stack.pop() == min) {
            min = stack.pop();
        }
    }

    public int top() {
        return stack.peek();
    }

    public int getMin() {
        return min;
    }
}
