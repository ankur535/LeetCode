class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n = nums.length;
		int ngr[] = nextgreaterToRight(nums);

		int ans[] = new int[n - k + 1];
		int idx = 0;

        //Iterate now from start and find the value which is greater in the window of k
		for (int si = 0; si <= n - k; si++) {

			int ei = si + k - 1;

			if (idx < si) {
				idx = si;
			}

			while (ngr[idx] <= ei) {
				idx = ngr[idx];
			}

			ans[si] = nums[idx];
		}
		return ans;
    }

    //Simple Next Greater to Right
    public static int[] nextgreaterToRight(int[] arr) {
		int n = arr.length;
		Stack<Integer> st = new Stack<>();
		int ngr[] = new int[n];

		ngr[n - 1] = n;
		st.push(n - 1);

		for (int i = n - 2; i >= 0; i--) {

			int val = arr[i];

			while (st.size() != 0 && arr[st.peek()] <= val) {
				st.pop();
			}

            ngr[i] = st.size() == 0 ? n : st.peek();
			
			st.push(i);
		}
		return ngr;
	}
}