//Without cleaning the string

//Approach 1
class Solution {
    public boolean isPalindrome(String s) {
        
        String str = s.toLowerCase();

        int i = 0;
        int j = str.length()-1;
        boolean isPalindrome = true;

        //Using 2 Pointer and avoiding alphanumeric characters
        while (i < j) {

            if (str.charAt(i) < 48 || (str.charAt(i) > 57 && str.charAt(i) < 97) || str.charAt(i) > 122) {
                i++;
            } else if (str.charAt(j) < 48 || (str.charAt(j) > 57 && str.charAt(j) < 97) || str.charAt(j) > 122) {
                j--;
            } else if (str.charAt(i) != str.charAt(j)) {
                isPalindrome = false;
                break;
            } else {
                i++;
                j--;
            }

        }
		
        return isPalindrome;
    }
}

//Approach 2: More cleaned code
class Solution {
    public boolean isPalindrome(String s) {
        
        //Simple solution without cleaning the string
        int left = 0, right = s.length() - 1;
    
        // Iterate until the pointers meet
        while (left < right) {
            // Skip non-alphanumeric characters
            while (left < right && !Character.isLetterOrDigit(s.charAt(left))) {
                left++;
            }
            while (left < right && !Character.isLetterOrDigit(s.charAt(right))) {
                right--;
            }
            
            // Compare alphanumeric characters
            if (left < right && Character.toLowerCase(s.charAt(left)) != Character.toLowerCase(s.charAt(right))) {
                return false;
            }
            left++;
            right--;
        }
    
    return true; 
    }
}


// With cleaning of string
class Solution {
    public boolean isPalindrome(String s) {
        
        //Simple solution with cleaning the string
        String str = s.replaceAll("[^a-zA-Z0-9]", "").toLowerCase();

        int i = 0;
        int j = str.length()-1;

        while (i < j) {
            if (str.charAt(i) != str.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }

        return true;
    }
}












